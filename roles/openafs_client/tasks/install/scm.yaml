---
- name: Verify service manager type is supported
  assert:
    that: ansible_service_mgr in ["systemd"]

- name: Verify selinux is disabled
  assert:
    that: ansible_selinux.mode != 'enforcing'
  when:
    - ansible_selinux is defined
    - ansible_selinux | type_debug == 'dict'
    - ansible_selinux.status == 'enabled'

- import_role:
    name: openafs_devel

- name: Build
  when: ansible_local.openafs.destdir is undefined
  block:
    - name: Checkout source code
      git:
        repo: "{{ afs_git_repo }}"
        version: "{{ afs_git_version }}"
        dest: ~/openafs
      register: checkout_results

    - name: Build OpenAFS binaries
      openafs_build:
        state: built-module
        target: install
        clean: "{{ checkout_results.changed }}"
        projectdir: ~/openafs
        destdir: ~/openafs/packaging/dest
        configure_options:
          enable:
            - debug
            - debug-kernel
            - kenel-module
          with:
            - linux-kernel-packaging
      register: build_results

    - name: Build results
      debug:
        var: build_results

    - set_fact:
        destdir: "{{ build_results.destdir }}"

    - name: Install binaries
      become: yes
      openafs_install_bdist:
        path: "{{ build_results.destdir }}"
        log_level: debug
      register: install_results

    - name: Store installation facts
      become: yes
      openafs_store_facts:
        state: update
        facts:
          install_method: scm
          client_installed: yes
          destdir: "{{ build_results.destdir }}"
          bins: "{{ install_results.bins }}"
          dirs: "{{ install_results.dirs }}"

- name: Store installation facts
  become: yes
  openafs_store_facts:
    state: update
    facts:
      client_service_name: openafs-client
      client_options: "{{ afs_afsd_opts }}"

- name: Setup systemd service
  become: yes
  block:
    - name: Install systemd unit file
      template:
        src: openafs-client.service.j2
        dest: "/etc/systemd/system/{{ afs_client_service_name }}.service"
      register: unit_file

    - name: Reload systemd
      systemd:
        daemon_reload: yes
      when: unit_file.changed
