---
- name: Verify service manager type is supported
  assert:
    that: ansible_service_mgr in ["systemd"]

- name: Verify selinux is disabled
  assert:
    that: ansible_selinux.mode != 'enforcing'
  when:
    - ansible_selinux is defined
    - ansible_selinux | type_debug == 'dict'
    - ansible_selinux.status == 'enabled'

- name: Verify the path to the installation tarball is specified
  assert:
    that:
      - afs_install_archive is defined
      - afs_install_archive != ''

- debug:
    msg: "Installing {{ afs_install_archive }}"

- name: Create directory
  file:
    state: directory
    path: "{{ afs_tmpdir }}/install"

- name: Upload binary distribution
  unarchive:
    src: "{{ afs_install_archive }}"
    dest: "{{ afs_tmpdir }}/install/"

- name: Install binary distribution
  become: yes
  openafs_install_bdist:
    path: "{{ afs_tmpdir }}/install"
    log_level: debug
    components:
      - common
      - client
  register: install_results

- import_tasks: "{{ role_path }}/tasks/common/Linux-load-module.yaml"

- name: Store installation facts
  become: yes
  openafs_store_facts:
    state: update
    facts:
      install_method: "{{ afs_install_method }}"
      client_installed: yes
      client_service_name: openafs-client
      client_options: "{{ afs_afsd_opts }}"
      bins: "{{ install_results.bins }}"
      dirs: "{{ install_results.dirs }}"

- name: Setup systemd service
  become: yes
  block:
    - name: Install systemd unit file
      template:
        src: openafs-client.service.j2
        dest: "/etc/systemd/system/{{ afs_client_service_name }}.service"
      register: unit_file

    - name: Reload systemd
      systemd:
        daemon_reload: yes
      when: unit_file.changed
