---
- name: Verify the admin password is defined
  fail:
    msg: |
      Please define afs_admin_password before running this role.
      It may be defined as a group variable (preferably encrypted
      with ansible-vault) or provided on the command line with
      the --extra-vars (-e) option.
  when: afs_admin_password is not defined

- name: Verify the default user password is defined
  fail:
    msg: |
      Please define afs_user_password before running this role.
      It may be defined as a group variable (preferably encrypted
      with ansible-vault) or provided on the command line with
      the --extra-vars (-e) option.
  when: afs_users and afs_user_password is not defined

- name: Load OS specific variables
  include_vars: "{{ ansible_os_family|lower }}.yaml"

- name: Admin login
  shell: >
    echo {{ afs_admin_password }} | {{ afs_kinit }} {{ afs_admin_principal }}@{{ afs_realm }} &&
    {{ afs_aklog }} -d -c {{ afs_cell }}

- name: Mount root volumes
  include: root-{{ ('-dynroot' in afs_afsd_opts) | ternary('dynamic','static') }}.yaml

- name: Create principals
  shell: >
    echo {{ afs_admin_password }} |
    {{ afs_kadmin }} -p {{ afs_admin_principal }}@{{ afs_realm }}
    -q "add_principal -pw {{ afs_user_password }} {{ item.name|replace('.','/') }}@{{ afs_realm }}"
  with_items: "{{ afs_users }}"
  when: afs_users

- name: Create users
  command: "{{ afs_pts }} createuser -name {{ item.name|replace('/','.') }}"
  register: pts_result
  changed_when: pts_result.rc == 0
  failed_when: >
    pts_result.rc != 0
    and 'Entry for name already exists' not in pts_result.get('stderr','')
  with_items: "{{ afs_users }}"
  when: afs_users

- name: Create groups
  command: "{{ afs_pts }} creategroup -name {{ item.name }}"
  register: pts_result
  changed_when: pts_result.rc == 0
  failed_when: >
    pts_result.rc != 0
    and 'Entry for name already exists' not in pts_result.get('stderr','')
  with_items: "{{ afs_groups }}"
  when: afs_groups

- name: Set group members
  command: "{{ afs_pts }} adduser -group {{ item.name }} -user {{ item.members|join(' ') }}"
  register: pts_result
  changed_when: pts_result.rc == 0
  failed_when: >
    pts_result.rc != 0
    and 'Entry for id already exists' not in pts_result.get('stderr','')
  with_items: "{{ afs_groups }}"
  when: afs_groups

- name: Create volumes
  command: >
    {{ afs_vos }} create
    -server {{ item.get('host', afs_root_server) }}
    -partition {{ item.get('part', afs_root_part) }}
    -name {{ item.name }}
    -maxquota {{ item.get('quota', 0) }}
  register: vos_result
  changed_when: vos_result.rc == 0
  failed_when: >
    vos_result.rc != 0
    and 'already exists' not in vos_result.get('stderr','')
  with_items: "{{ afs_volumes }}"
  when: afs_volumes

- name: Mount volumes
  command: >
    {{ afs_fs }} mkmount
    -dir /afs/.{{ afs_cell }}/{{ item.get('mtpt', item.name) }}
    -vol {{ item.name }}
    -cell {{ afs_cell }}
  register: fs_result
  changed_when: fs_result.rc == 0
  failed_when: >
    fs_result.rc != 0
    and 'File exists' not in fs_result.get('stderr','')
  with_items: "{{ afs_volumes }}"
  when: afs_volumes

- name: Release volumes
  command: "{{ afs_vos }} release {{ item }} -verbose"
  with_items:
    - root.cell

- name: Flush the volume cache
  command: "{{ afs_fs }} checkvolumes"
  changed_when: False
